{
  "name": "Hyperneat-adjacency-matrix",
  "tagline": "An analysis of HyperNEAT adjacency matrices using various space filling curves.",
  "body": "HyperNEAT is a well known Neuro-Evolution algorithm developed by Kenneth Stanley. HyperNEAT uses an indirect encoding called a Compositional Pattern Producing Network (CPPN) as the genotype. The CPPN is queried with substrate node coordinates to produce a connectivity pattern for the phenotype. This post will be analyzing the adjacency matrices that are produced when different space-filling curves are used to number the substrate nodes instead of ordering them by row-col order.\r\n\r\nThe reason for looking at the adjacency matrices of HyperNEAT in this way is to compare and contrast them to the adjacency matrices created by [Compositional Adjacency Matrix Producing Networks](http://vixra.org/pdf/1609.0213v1.pdf) (CAMPN). CAMPNs is an indirect encoding that directly produces an adjacency matrix without having to repeatedly query the genotype using coordinates. In fact, CAMPNs don't use spatial coordinates at all. Instead, substrate nodes are numbered using a space filling curve, which allows for locality to be preserved if the number of nodes in the substrate is to grow, as in ES-HyperNEAT. CAMPNs can be restricted from growing by limiting the number of Kronecker type nodes and in doing so, acts more like regular HyperNEAT where the substrate doesn't evolve.\r\n\r\nIf the theory behind CAMPNs is correct, changing the ordering of the substrate nodes in HyperNEAT should bring more order and compressibility to the HyperNEAT adjacency matrix. This is what I will be investigating.\r\n\r\nIn this post I'll be using Python Evolutionary Algorithms ([https://github.com/noio/peas](peas)) produced by Thomas Van Der Berg.\r\n\r\n**Space Filling Curves**\r\n\r\nWe'll be using different space filling curves to renumber the nodes of a HyperNEAT substrate. By default, HyperNEAT implementations usually create an adjacency matrix using a substrate numbered in row-col order like so.\r\n\r\n![row-column order of HyperNEAT substrate](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/row-col-substrate.png?raw=true)\r\n\r\nInstead, we could use a [space filling curve](https://www.youtube.com/watch?v=DuiryHHTrjU) such as the [Z-order curve](https://en.wikipedia.org/wiki/Z-order_curve) to renumber the substrate.\r\n\r\n![Z-order of HyperNEAT substrate](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/z-order-substrate.png?raw=true)\r\n\r\nI'll create a mapping from the row-col order to the Z-order using some python code. This will help us later when we need to convert the HyperNEAT substrates to use a space-filling curve order.\r\n\r\n```python\r\ndef unpart1by1(n):\r\n    n &= 0x55555555\r\n    n = (n ^ (n >> 1)) & 0x33333333\r\n    n = (n ^ (n >> 2)) & 0x0f0f0f0f\r\n    n = (n ^ (n >> 4)) & 0x00ff00ff\r\n    n = (n ^ (n >> 8)) & 0x0000ffff\r\n    return n\r\n\r\n\r\ndef deinterleave2(n):\r\n    return unpart1by1(n >> 1), unpart1by1(n)\r\n\r\n# Creates a mapping from row-col order to Z-order\r\nmap = {}\r\nfor i in range(0, 16):\r\n    xpos, ypos = deinterleave2(i)\r\n    map[ypos*4 + xpos] = i\r\n```\r\n\r\nI will also use a space filling curve I've been calling the Symmetric Z order curve. It looks like this.\r\n\r\n![Symmetric Z order substrate](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/symmetric-z-order-substrate.png?raw=true)\r\n\r\nThe Symmetric Z-order curve uses similar code to the Z-order curve but has a strange bit operator function that I've called \"twirl\" for lack of a better name. Note that the Symmetric Z-order curve can be generalized to a higher number of nodes just like the Z-order curve can.\r\n\r\n```python\r\ndef twirl(n):\r\n    mask = 0x80000000\r\n\r\n    for i in range(0, 15):\r\n        n = n ^ ((n & (mask >> (2 * i + 1))) >> 1)\r\n        n = n ^ ((n & (mask >> (2 * i))) >> 2)\r\n\r\n    return n\r\n\r\nmap = {}\r\nfor i in range(0, 16):\r\n    xpos, ypos = deinterleave2(twirl(i))\r\n    map[ypos*4 + xpos] = i\r\n```\r\n\r\n**HyperNEAT Adjacency Matrices**\r\n\r\nNow it's possible to take a look at the Adjacency Matrices when remapped to a space filling curve. I've also included the Hilbert curve to show that the success of the Z-order curves isn't a fluke.\r\n\r\n![Row Column 1](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/rc-1.png?raw=true)\r\n\r\n![Z Order 1](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/z-1.png?raw=true)\r\n\r\n![Symmetric Z Order 1](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/sz-1.png?raw=true)\r\n\r\n![Hilbert Curve 1](https://github.com/stefanopalmieri/HyperNEAT-Adjacency-Matrix/blob/gh-pages/images/hc-1.png?raw=true)\r\n\r\nThis is pretty much what I expected. When a Z-order curve is used to order the adjacency matrix, the quadrants of the adjacency matrix appear similar to each other. It is very common for the top-left quadrant to be similar to the bottom-right quadrant and the top-right quadrant to be similar to the bottom-left quadrant. The reason is because the top-left and bottom-right quadrants contain all the connections within the left and right hemispheres, respectively. Whereas the top-right and bottom-left quadrants contain the interconnections between the hemispheres. This effect can also be seen in large scale anatomical mappings of the human brain.\r\n\r\n![](https://upload.wikimedia.org/wikipedia/commons/c/c0/Average_Regional_Connection_Matrix,_Network_Layout,_and_Connectivity_Backbone.png)\r\n\r\n![](http://www.frontiersin.org/files/Articles/30773/fncom-06-00068-r2/image_m/fncom-06-00068-g001.jpg)\r\n\r\nOne thing I didn't expect was for the quadrants to be inverted and rotated. I intended for the Symmetrical Z-order curve to fix this kind of rotation so I don't know why exactly it's happening. It could be that my orientation of the substrate is wrong.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}